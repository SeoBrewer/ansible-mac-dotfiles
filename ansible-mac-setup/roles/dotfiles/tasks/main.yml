---
- name: Ensure dotfiles directory exists
  file:
    path: "{{ ansible_env.HOME }}/.dotfiles"
    state: directory
    mode: '0755'

- name: Copy dotfiles to .dotfiles directory
  copy:
    src: "{{ role_path }}/files/{{ item }}"
    dest: "{{ ansible_env.HOME }}/.dotfiles/{{ item }}"
    mode: '0644'
  loop:
    - .vimrc
    - .tmux.conf
    - .zshrc

- name: Create symlinks for dotfiles
  file:
    src: "{{ ansible_env.HOME }}/.dotfiles/{{ item }}"
    dest: "{{ ansible_env.HOME }}/{{ item }}"
    state: link
    force: yes
  loop:
    - .vimrc
    - .tmux.conf
    - .gitconfig
    - .zshrc

- name: Install Oh My Zsh
  shell: sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
  args:
    creates: "{{ ansible_env.HOME }}/.oh-my-zsh"

- name: Ensure .vim/autoload directory exists
  file:
    path: "{{ ansible_env.HOME }}/.vim/autoload"
    state: directory
    mode: '0755'
    recurse: yes

- name: Debug .vim/autoload directory
  debug:
    msg: "Contenido de {{ ansible_env.HOME }}/.vim/autoload: {{ lookup('pipe', 'ls -la ' + ansible_env.HOME + '/.vim/autoload') }}"

- name: Install Vim-Plug
  get_url:
    url: https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    dest: "{{ ansible_env.HOME }}/.vim/autoload/plug.vim"
    mode: '0644'
    force: yes

- name: Debug Vim-Plug installation
  debug:
    msg: "Contenido de {{ ansible_env.HOME }}/.vim/autoload/plug.vim: {{ lookup('file', ansible_env.HOME + '/.vim/autoload/plug.vim') | truncate(100, True, '...') }}"

- name: Check if Vim is installed
  command: which vim
  register: vim_check
  ignore_errors: yes
  changed_when: false

- name: Install Vim plugins
  command: vim +PlugInstall +qall
  changed_when: false
  when: vim_check.rc == 0

- name: Install Homebrew packages
  homebrew:
    name:
      - git
      - tmux
      - nvm
      - pyenv
      - go
    state: present

- name: Install global npm packages
  npm:
    name:
      - yarn
      - typescript
    global: yes
  environment:
    PATH: "{{ ansible_env.HOME }}/.nvm/versions/node/v{{ node_version }}/bin:{{ ansible_env.PATH }}"
  vars:
    node_version: "14.17.0"  # Ajusta esto a la versión de Node que prefieras

- name: Solicitar nombre del usuario
  pause:
    prompt: "Por favor, introduce tu nombre completo"
  register: user_name
  when: not ansible_check_mode

- name: Set default name for check mode
  set_fact:
    user_name: 
      user_input: "John Doe"
  when: ansible_check_mode

- name: Solicitar email personal del usuario
  pause:
    prompt: "Por favor, introduce tu email personal"
  register: user_email_personal
  when: not ansible_check_mode

- name: Set default personal email for check mode
  set_fact:
    user_email_personal: 
      user_input: "john.doe@personal.com"
  when: ansible_check_mode

- name: Solicitar email de trabajo del usuario
  pause:
    prompt: "Por favor, introduce tu email de trabajo"
  register: user_email_work
  when: not ansible_check_mode

- name: Set default work email for check mode
  set_fact:
    user_email_work: 
      user_input: "john.doe@work.com"
  when: ansible_check_mode

- name: Crear directorios de código
  file:
    path: "{{ ansible_env.HOME }}/{{ item }}"
    state: directory
    mode: '0755'
  loop:
    - code/personal
    - code/work

- name: Template gitconfig files
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: '0644'
  loop:
    - { src: 'gitconfig.j2', dest: '{{ ansible_env.HOME }}/.dotfiles/.gitconfig' }
    - { src: 'gitconfig_personal.j2', dest: '{{ ansible_env.HOME }}/code/personal/.gitconfig' }
    - { src: 'gitconfig_work.j2', dest: '{{ ansible_env.HOME }}/code/work/.gitconfig' }

# Puedes agregar más tareas aquí para configuraciones adicionales
